1.Ürün Ekleme (addItem):

Stok miktarı yanlış kontrol ediliyordu. <= yerine < kullanılmalıydı.
Stok miktarının doğru kontrol edilip edilmediğini görmek için addItem
içerisinde debugger kullandım.

 addItem(productId, quantity = 1) {
    try {
        const product = products.find(p => p.id === productId);
        
        debugger; // Burada stok kontrolü için debugger 

        if (!product) {
            throw new Error('Ürün bulunamadı!');
        }

        if (product.stock < quantity) { // Stok kontrolü düzeltildi
            throw new Error('Yetersiz stok!');
        }

        const existingItem = this.items.find(item => item.productId === productId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            this.items.push({
                productId,
                name: product.name,
                price: product.price,
                quantity
            });
        }

        this.calculateTotal();
        this.updateUI();

    } catch (error) {
        console.error('Ürün ekleme hatası:', error);
        this.showError(error.message);
    }
}

2.Toplam Hesaplama (calculateTotal):

item.price ile item.quantity çarpılmadan toplam hesaplandığı için debugger ekledim.

calculateTotal() {
    this.total = this.items.reduce((sum, item) => {
        debugger; // Burada toplam hesaplama için debugger koyuyorum
        return sum + (item.price * item.quantity); // Fiyat ve miktar çarpılmalı
    }, 0);

    if (this.discountApplied && this.total > 0) {
        this.total *= 0.1;
    }
}

3.Ürün Silme (removeItem):

Stok durumunu kontrol etmek için debugger ekledim.
removeItem(productId) {
    try {
        const itemIndex = this.items.findIndex(item => item.productId === productId);

        if (itemIndex === -1) {
            throw new Error('Ürün sepette bulunamadı!');
        }

        const item = this.items[itemIndex];
        const product = products.find(p => p.id === productId);

        if (product) {
            debugger; // Burada stok artışını kontrol etmek için debugger koyuyorum
            product.stock += item.quantity; // Ürün miktarına göre stok artmalı
        }

        this.items.splice(itemIndex, 1);
        this.calculateTotal();
        this.updateUI();

    } catch (error) {
        console.error('Ürün silme hatası:', error);
        this.showError(error.message);
    }
}

4.İndirim Uygulama(applyDiscount):
İndirimde yanlış hesaplama yapılıyordu, toplam doğru şekilde düşürülmüyordu.

 applyDiscount(code) {
    if (code === 'INDIRIM10' && !this.discountApplied) {
        this.discountApplied = true;
        this.calculateTotal();

        debugger; // Burada indirim sonrası toplam tutarı kontrol ediyorum

        this.updateUI();
        this.showMessage('İndirim uygulandı!');
    } else {
        this.showError('Geçersiz indirim kodu!');
    }
}

5.Sepet ve Ürün Ekleme (addToCart):
Stok sıfır olan ürünler yanlışlıkla sepete eklenebiliyordu.

addToCart(productId) {
    const product = products.find(p => p.id === productId);
    debugger; // Sepete eklemeden önce stok kontrolünü burada yapıyorum

    if (product && product.stock > 0) {
        window.cart.addItem(productId, undefined);
        document.dispatchEvent(new Event('stockUpdate'));
    }
}
